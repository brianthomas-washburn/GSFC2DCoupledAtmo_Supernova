;This NCL code is used to do analysis (mainly plotting) of "coldens" files
; from the NASA GSFC coupled 2D atmo chem/dynaimcs model.

;v1.0 Jan2019 by Brian Thomas

;Current version can take files from multiple 2-year duration runs
; and make a series of plots, which can then be combined into an 
; animation using "convert" (ImageMagick); eg: convert -delay 50 *.png anim.gif

load "./gsnColorRange.ncl"

begin
  
  print("************ WARNING!!! If you are using an nc file generated by the makenc code before 24Apr2020 then the H2Orainout values are probably not correct.  They are likely the same as the O2 values, so you can check that way.  Sorry.")

;---- Variables for data to read in, what to plot, etc: ---------;
;  
  casenum = 4
; If doing percent difference, then case2+ is the "new", case1 is control
  casenames = new(casenum,string)
  casenames = (/"controlRun_19July2021", "case1", "case2", "case3"/)
  print(casenames)
  indir = new(casenum,string)
  do ic=0,casenum-1
    ;print("-----------------------------"+ic)
    indir(ic) = "path/"+casenames(ic)+"/"
    ;print(indir(ic))
  end do
  print(indir)
; 
;Analyze/Plot data, or percent difference between data sets?
  opt = "perdiff"  ;"data"
;if "data", which data file to look at?
  opt_df = 1
; 
;How many 2-year runs?  
  itmax = 10 ;20
;Number of time points in each run (NOTE: below assumes daily data):
  rtmax = 2*360
;Set the time axis label:
  timeLabel = "Days"
;setup time variables array for plotting  
  tmax = itmax*rtmax
  times = ispan(0,tmax-1,1)
;  printVarSummary(times)
  t1 = 0 ;start time for plot
  t2 = 16*360 ;tmax ;end time for plot
;Year of start of run sequence:
  stYr = 1975 
;  
;How many latitudes?
  latmax = 45
;  
;What data to be plotted? (this goes in output filenames)
; (This variable is read from both files)
  datPlot = "O3" ;"NOy" ;"NO2" ;"HNO3_rainout"
;
;convert to Dobson Units? (for column density values)
  du = "yes"
;other scale factor? Set to 0 for no scale factor to be used
  scale = 0 ;1.02962e-15 ;For HNO3 rainout, converts to mg of N per m^2 per s
  scaleUnits = "mg of N per m^2 per s"
;
;Average over latitude? (global average) This also turns on line plot for the result.  
  latav = "yes"
  casePlotCont = 1 ;if plotting a contour plot, pick one of the cases
  cname = casenames(casePlotCont)
;
;For contour plot, use red-blue color scheme?
;  This should be used for O3 perdiff lat v time plots
  plot_redBlue = "yes" 
  colors = "BlRe" ;color table to use
;------------- END of setup variables -----------------;
  
;Arrays to store all of the data (from multiple run files):
  dataIn = new((/casenum,itmax*rtmax,latmax/),float)

;Loop over runs:  
  dst = 0 ;array time position to start in, for filling total data array
  dsp = 0 ; (stop position)
  do it=1,itmax
    do ic=0,casenum-1
;    print(it)
;File 1:
      in_file1a = "colden_daily-2yr_"+casenames(ic)
      in_file1b = "_r"+it
      yr = stYr+it*2-2
      in_file1c = "_startYr"+yr
      in_file1 = in_file1a+in_file1b+in_file1c+".out.nc"
      print(indir(ic)+in_file1)
      f1 = addfile(indir(ic)+in_file1,"r")
;    
      datIn := f1->$datPlot$
;
      dsp = (dst+rtmax)-1
;    print(dst+"  "+dsp)
      dataIn(ic,dst:dsp,:) = datIn(:,:)
;
;    printVarSummary(data1)
;    printVarSummary(data2)
;
;    
    end do ;ic (loop on multiple cases)
    dst = dsp+1
  end do ;it (loop on multiple runs)

;
;Read in the latitude values (all files are the same so it doesn't matter which one here):    
  lat = f1->lat4arr
;  print(lat)
    
;Plot data (just one file, not comparing the two):
  if(opt.eq."data") then
    if(opt_df.eq.1) then
      datp = dataIn(1,:,:)
      cname = case1
    end if
    if(opt_df.eq.2) then
      datp = dataIn(2,:,:)
      cname = case2
    end if
;convert to DU
    if (du.eq."yes") then
      datp = datp/(2.69E16)
      datp@units = "DU"
    end if    
;other scale factor?
    if (scale.ne.0) then
      datp = datp*scale
      datp@units = scaleUnits 
    end if;1.0
    ;printVarSummary(datp)
  end if ;plot data or compare

;Compare the two data sets (percent difference):
  if(opt.eq."perdiff") then
    datp = new((/casenum-1,itmax*rtmax,latmax/),float)
    do ic=1,casenum-1
      datp(ic-1,:,:) = (dataIn(ic,:,:)-dataIn(0,:,:))/dataIn(0,:,:)
    end do
  end if ;compare (perdiff)
  datp = 100*datp
  copy_VarMeta(dataIn,datp)
  datp@units = "percent difference"
  printVarSummary(datp)
  print(min(datp))

;Latitude average (global average)
; (see https://www.ncl.ucar.edu/Document/Functions/Built-in/wgt_areaave.shtml):
  if(latav.eq."yes") then
    datp_lAvg = new((/casenum-1,itmax*rtmax/),float)
    rad = 4.0*atan(1.0)/180.0
    clat = cos(lat*rad)
    do ic=0,casenum-2
      datp_lAvg(ic,:) = dim_avg_wgt_n_Wrap(datp(ic,:,:),clat,1,1)
      datp_lAvg@_FillValue = -9999.99
      printVarSummary(datp_lAvg)
;    print(datp_lAvg)
      print(min(datp_lAvg(ic,:)))
    end do
;     
;Plotting:
    if(opt.eq."perdiff") then
      axisLabel="% change "+datPlot+" column (globally averaged)"
    end if
    if(opt.eq."data") then
      axisLabel=datPlot+" column (globally averaged) "+datp@units
    end if
    plotFile := datPlot+"_"+opt+"_globalAvg_multiple" ;+cname
    wks   := gsn_open_wks ("png",plotFile )  ; send graphics to PNG file                            
    res                  = True                ; plot mods desired                                  
    res@xyLineThicknessF = 4.0                                                                      
    res@tiXAxisString = timeLabel ;"Days"            
    res@tiYAxisString = axisLabel
    res@tiMainString  = " " ;plotFile                    
    res@tiMainFontHeightF = 0.020 ;changes font size       
    res@trXMinF = t1    
    res@trXMaxF = t2

;    res@tiMainString     = cname 

    ;make the time axis labels years instead of days:        
    res@tmXBMode        = "Explicit"         
    res@tmXBValues      = ispan(0,5760,360)      
    res@tmXBLabels      = (/-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15/) ;"" + res@tmXBValues
    res@tmXBMinorValues = ispan(0,5760,90)
    res@tiXAxisString   = "Years"

    ;going to make a legend, so don't draw these until later:
    res@gsnDraw = False
    res@gsnFrame = False
    
    plot = gsn_csm_xy(wks,times,datp_lAvg,res)

;setup legend parameters
    gres = True
;   ;location of legend:
    gres@YPosPercent = 45.0
    gres@XPosPercent = 55.0
;   ;legend line settings:
    lineres = True
    lineres@lgLineThicknesses = 3.5
    lineres@LineLengthPercent = 7.0
    lineres@lgDashIndexes = (/2,1,0/)
;   ;Text to go in legend:
    textres = True
    textres@lgLabels = (/"100 pc 3000 yr","50 pc 1000 yr","20 pc 100 yr"/)
;plot legend
    plot = simple_legend(wks,plot,gres,lineres,textres)
;now actually draw the plot and legend:
    draw(plot)
    frame(wks)
    
  end if ;lat av yes
;
;    
;If not lat av, then do contour plots (lat vs time)
  if(latav.eq."no") then
    datpCont = datp(casePlotCont-1,:,:)
;reorder for plotting:                                                                          
      datpCont := datpCont(lat|:,time|:)
      printVarSummary(datpCont)    
      
;Plotting:  
      plotFile = datPlot+"_"+opt+"_lat-time-"+cname ;
      
      wks   = gsn_open_wks ("png",plotFile )  ; send graphics to PNG file 
      res   = True                ; plot mods desired

;For contours, define the min/max values and step between values:
      datmin = min(datpCont)
      datmax = max(datpCont)    
      datstep = 0.1

;For blue/red style:
      if(plot_redBlue.eq."yes")then
        grid_center = 0
        cmapsize = 97 ;dependent on color map
        cmapcenter = 49 ;dependent on color map
        
        gsn_range = gsnColorRange(datmin, datmax, datstep, grid_center, cmapsize, cmapcenter)
        res@gsnMaximize = True
        colors = "BlRe"
        cmap = read_colormap_file(colors) ;these lines are needed to flip color map around
        cmap = cmap(::-1,:)               ; so that red is negative values
        res@cnFillPalette = cmap(gsn_range@ColorStart-2:gsn_range@ColorEnd-2,:) ;colors
      end if
;--
;For other style:
      if(plot_redBlue.eq."no")then
        res@cnFillPalette = colors
      end if
      
      res@cnFillOn         = True                ; color on
;  res@lbLabelStride    = 4                   ; every other label
      res@lbOrientation    = "Vertical"          ; vertical label bar
;  res@pmLabelBarOrthogonalPosF = -0.04       ; move label bar closer to axis
      res@cnLinesOn        = False               ; turn off contour lines
      
      res@tiMainString     = "20 pc 100 yr" ;cname ;yr ;-1935

      res@tiXAxisString = timeLabel ;"Days"                             
      res@tiYAxisString = "Latitude"

          ;make the time axis labels years instead of days:        
      res@tmXBMode        = "Explicit"         
      res@tmXBValues      = ispan(0,5760,360)      
      res@tmXBLabels      = (/-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15/) ;"" + res@tmXBValues
      res@tmXBMinorValues = ispan(0,5760,90)
      res@tiXAxisString   = "Years"

      res@trXMinF = t1    
      res@trXMaxF = t2
      
;  res@vpXF             = 0.12                ; default is 0.2 (aspect ratio)
;  res@vpYF             = 0.8                 ; default is 0.8
;  res@vpHeightF        = 0.4                 ; default is 0.6
;  res@vpWidthF         = 0.75                ; default is 0.6
      
;  res@cnLevelSelectionMode = "ManualLevels" ; manual levels
;  res@cnMinLevelValF       =  140
;  res@cnMaxLevelValF       =  420
;  res@cnLevelSpacingF      =  20 
      
      plot = gsn_csm_lat_time(wks,datpCont(:,:),res) 
      
    end if ;lat av no
    
end
